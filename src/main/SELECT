3.1
SELECT * FROM users;

3.2
SELECT name FROM users
WHERE name ILIKE '%Ð°%'

3.3
SELECT name, prise FROM products
WHERE prise>=100

3.4
SELECT name FROM users
WHERE details IS NULL

3.5
 SELECT
     p.name AS product,
     COUNT(DISTINCT c.user_id) AS user
 FROM cart c
 JOIN products p ON c.products_id = p.id
 GROUP BY p.name

3.6
SELECT
    u.id AS ID,
    u.name AS Name,
    SUM(o.total_sum)
FROM orders o
JOIN users u ON o.user_id = u.id
GROUP BY u.name, u.id

3.7
\promt 'user_id' i
SELECT
    p.name
FROM cart c
JOIN products p ON c.products_id = p.id
WHERE user_id = :i;

3.8
SELECT
    u.name AS Name
FROM orders o
JOIN users u on u.id = o.user_id
WHERE total_sum >=500
GROUP BY u.name


3.9
SELECT
    u.name AS NAME,
    SUM(c.number) AS SUM
FROM cart c
JOIN users u ON c.user_id = u.id
GROUP BY u.name
ORDER BY SUM DESC
LIMIT 1


3.10
SELECT
    id,
    name,
    prise
FROM products
ORDER BY prise DESC
LIMIT 5


3.11
SELECT
    id,
    name,
    prise
FROM products
WHERE prise> (SELECT
                 AVG(prise)
             FROM products)


3.12
WITH get_total_sum AS(
    SELECT
        u.id,
        u.name,
        SUM(p.prise * c.number) AS total_sum
    FROM users u
             JOIN cart c ON u.id = c.user_id
             JOIN products p ON c.products_id = p.id
    GROUP BY u.id, u.name
)
SELECT
    id,
    name,
    total_sum
FROM get_total_sum
WHERE total_sum > (SELECT AVG(total_sum) FROM get_total_sum);



3.13
SELECT
    u.id,
    u.name
FROM users u
         JOIN cart c ON u.id = c.user_id
         JOIN products p ON c.products_id = p.id
GROUP BY u.id, u.name
HAVING MIN(p.prise) > 0;




3.14
SELECT
    p.id,
    p.name
FROM products p
JOIN cart c ON p.id = c.products_id
GROUP BY p.id, p.name
HAVING COUNT(DISTINCT c.user_id) = (
        SELECT COUNT(*)
        FROM users
    )-10;



3.15
SELECT
    u.id,
    u.name,
    SUM(c.number) AS total_items
FROM users u
JOIN cart c ON u.id = c.user_id
GROUP BY u.id, u.name
HAVING SUM(c.number) > 10;



3.16
SELECT
    u.id,
    u.name,
    SUM(o.total_sum) AS total_orders_sum
FROM users u
JOIN orders o ON u.id = o.user_id
GROUP BY u.id, u.name
HAVING SUM(o.total_sum) = (
    SELECT MAX(user_total)
    FROM (
             SELECT SUM(o2.total_sum) AS user_total
             FROM orders o2
             GROUP BY o2.user_id
         ) t
);



3.17
WITH user_totals AS (
    SELECT
        u.id,
        u.name,
        SUM(c.number) AS total_items
    FROM users u
    JOIN cart c ON u.id = c.user_id
    GROUP BY u.id, u.name
)
SELECT
    id,
    name,
    total_items
FROM user_totals
WHERE total_items > (SELECT AVG(total_items) FROM user_totals);



3.18
SELECT
    p.id,
    p.name
FROM products p
         JOIN cart c ON p.id = c.products_id
GROUP BY p.id, p.name
HAVING COUNT(DISTINCT c.user_id) = 1;




3.19
SELECT
    u.id,
    u.name,
    SUM(o.total_sum) AS total_orders_sum,
    COUNT(o.id) AS orders_count
FROM users u
JOIN orders o ON u.id = o.user_id
GROUP BY u.id, u.name
HAVING SUM(o.total_sum) > 1000
   AND COUNT(o.id) > 3;




3.20
SELECT
    p.id,
    p.name,
    SUM(p.prise * c.number) AS total_value
FROM products p
         JOIN cart c ON p.id = c.products_id
GROUP BY p.id, p.name
ORDER BY total_value DESC
LIMIT 1;